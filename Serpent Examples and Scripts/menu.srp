require "wxserpent"

// WXS_DEFAULT_WINDOW is the initial window created automatically
// when you run wxserpent. It is the parent of my_menu, but you
// could open another window and put the menu there instead.

Statictext(WXS_DEFAULT_WINDOW, "Please try the Command menu",
           10, 10, 300, 30)

// Create a Menu; parameter is the desired menu name
my_menu = default_window.get_menu("Command")

// Add items to a menu using the item method. Parameters
// are name (string), help string, and checkable (boolean)
// nil is the target object (nil means call a function), and
// 'hello_handler' is the handler function name
hello_world_item = my_menu.item("Hello World", "print Hello World", 
                                false, nil, 'hello_handler')
// now, hello_world_item is the item number for this menu item
display "created Hello World item", hello_world_item

// The separator() method inserts a separator into the menu
my_menu.separator()

// If checkable is true, the menu item has a boolean state
// and will display a check mark when the state is true
my_menu.item("Trace", "print some trace info", true, nil, 'trace_handler')
// this flag will be controlled by the Trace menu item

// Another item to support testing and show how you can delete a
// menu item
my_menu.item("Delete Hello World", "deletes the Hello World option", false, 
             nil, 'delete_handler')

menu_trace_flag = false

def hello_handler(obj, event, x, y)
    if menu_trace_flag
        display "hello_handler", obj, event, x, y
    print "Hello World"

def trace_handler(obj, event, x, y)
    if menu_trace_flag
        display "trace_handler", obj, event, x, y
    menu_trace_flag = (y == 1)
    print "trace handler called"

def delete_handler(obj, event, x, y)
    if menu_trace_flag
        display "delete_handler", obj, event, x, y
    if hello_world_item // a number until deleted
        my_menu.delete(hello_world_item)
        hello_world_item = nil


